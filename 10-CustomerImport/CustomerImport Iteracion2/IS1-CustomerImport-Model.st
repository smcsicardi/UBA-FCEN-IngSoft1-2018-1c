Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/24/2018 23:30'!test05CanNotImportAddressWithNoCustomerBeforeIt	self 		should: [ self importCustomersFrom: self addressWithoutCustomer on: session  ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter customerMissing  .			self assert: self customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/25/2018 00:48'!test08CanNotImportFromDataContainingAnEmptyLine	self		should: [ self importCustomersFrom: self dataContainingAnEmptyLine on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordType.			self assert: self addressIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:20'!testImportCustomers	self importCustomersFrom: self validTestData on: session.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 6/23/2018 23:35'!test03CanNotImportWithExtraColumnsForAddress	self 		should: [ self importCustomersFrom: self customersDataWithAddressWithExtraColumns on: session  ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter addressRecordHasTooManyColumns .			self assert: self addressIsEmpty]! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 6/23/2018 22:55'!test01CanNotImportWithExtraColumnsForCustomer	self 		should: [ self importCustomersFrom: self customersDataWithExtraColumns on: session  ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter customerRecordHasTooManyColumns .			self assert: self customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/25/2018 00:50'!test07CanNotImportAddressWithInvalidColumnType	self		should: [ self importCustomersFrom: self addressDataWithInvalidTypeColumns on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordType.			self assert: self addressIsEmpty  ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 6/23/2018 22:55'!test02CanNotImportWithFewerColumnsForCustomer	self 		should: [ self importCustomersFrom: self customersDataWithFewerColumns on: session  ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter customerRecordHasFewerColumns .			self assert: self customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/25/2018 00:48'!test06CanNotImportCustomerWithInvalidColumnType	self		should: [ self importCustomersFrom: self customersDataWithInvalidTypeColumns on: session ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordType.			self assert: self customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 6/23/2018 23:36'!test04CanNotImportWithFewerColumnsForAddress	self 		should: [ self importCustomersFrom: self customersDataWithAddressWithFewerColumns on: session  ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter addressRecordHasFewerColumns  .			self assert: self addressIsEmpty]! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!setUp	session := DataBaseSession for: (Array with: self addressMapping with: self customerMapping).	session open.	session beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!tearDown	session commit.	session close! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!CustomerImportTest methodsFor: 'test - data' stamp: 'SebastianSicardi 6/23/2018 23:02'!customersDataWithAddressWithExtraColumns	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAs,extracolumn'! !!CustomerImportTest methodsFor: 'test - data' stamp: 'SebastianSicardi 6/23/2018 23:41'!addressWithoutCustomer	^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test - data' stamp: 'SebastianSicardi 6/23/2018 22:53'!customersIsEmpty	^(session selectAllOfType: Customer) isEmpty.! !!CustomerImportTest methodsFor: 'test - data' stamp: 'SebastianSicardi 6/23/2018 23:10'!addressIsEmpty	^(session selectAllOfType: Address) isEmpty ! !!CustomerImportTest methodsFor: 'test - data' stamp: 'HernanWilkinson 11/1/2016 15:17'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test - data' stamp: 'SebastianSicardi 6/23/2018 23:37'!customersDataWithAddressWithFewerColumns	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test - data' stamp: 'SebastianSicardi 6/23/2018 23:02'!customersDataWithExtraColumns	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444,extraColumn'! !!CustomerImportTest methodsFor: 'test - data' stamp: 'julianpalladino 6/25/2018 00:45'!dataContainingAnEmptyLine	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test - data' stamp: 'julianpalladino 6/25/2018 00:49'!addressDataWithInvalidTypeColumns		^ ReadStream		on:			'C,Pepe,Sanchez,D,22333444			AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test - data' stamp: 'SebastianSicardi 6/23/2018 23:01'!customersDataWithFewerColumns	^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test - data' stamp: 'SebastianSicardi 6/23/2018 23:51'!customersDataWithInvalidTypeColumns		^ ReadStream		on:			'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'julianpalladino 6/24/2018 23:50'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .		" Esto rompe encapsulamiento, pero despues de consultar por mail concluimos que no esta mal dejarlo asi, abstraerlo en un mensaje del customer tiene sus ventajas y desventajas"! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:13'!assertImportedCustomersSizeIsCorrect		self assert: (session selectAllOfType: Customer) size equals: 2.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 15:17'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|customers |		customers := session 		select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			self assert: customers size equals: 1.		^customers anyOne.! !!CustomerImportTest methodsFor: 'importing' stamp: 'julianpalladino 6/25/2018 00:08'!importCustomersFrom: inputStream on: aSession		| aCustomerImporter |		aCustomerImporter := CustomerImporter new initializeFrom: inputStream on: aSession.	aCustomerImporter import.	! !Object subclass: #CustomerImporter	instanceVariableNames: 'line newCustomer lineRecord session inputStream'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'assertions' stamp: 'SebastianSicardi 6/23/2018 23:04'!assertAddressRecordHasCorrectNumerOfFields 	(lineRecord size > 6)		ifTrue: [ self error: self class addressRecordHasTooManyColumns ].	(lineRecord size < 6)		ifTrue: [ self error: self class addressRecordHasFewerColumns ].! !!CustomerImporter methodsFor: 'assertions' stamp: 'SebastianSicardi 6/23/2018 22:55'!assertCustomerRecordHasCorrectNumerOfFields 	(lineRecord size > 5)		ifTrue: [ self error: self class customerRecordHasTooManyColumns ].	(lineRecord size < 5)		ifTrue: [ self error: self class customerRecordHasFewerColumns ].! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianSicardi 6/23/2018 23:47'!isCustomerRecord	^ lineRecord first = 'C'! !!CustomerImporter methodsFor: 'importing' stamp: 'julianpalladino 6/24/2018 23:43'!assertRecordLineIsNotEmpty	lineRecord isEmpty ifTrue: [ self error: self class invalidRecordType ]! !!CustomerImporter methodsFor: 'importing' stamp: 'julianpalladino 6/25/2018 00:00'!processRecord	self lineToRecord.	self isCustomerRecord ifTrue: [ ^self createCustomerRecord ].	self isAddressRecord ifTrue: [ ^self createAddressRecord ].		self error: self invalidRecordType! !!CustomerImporter methodsFor: 'importing' stamp: 'julianpalladino 6/25/2018 00:07'!import	"	self importCustomers	"	[ self processLine ] whileTrue: [ self processRecord.]! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianSicardi 6/23/2018 23:48'!assertTypeOfRecordIsOneCharacter	lineRecord first size > 1		ifTrue: [ self error: self class invalidRecordType ]! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianSicardi 6/23/2018 23:47'!isAddressRecord	^ lineRecord first = 'A'! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianSicardi 6/23/2018 23:42'!assertCustomerIsNotNil	newCustomer isNil ifTrue: [ self error: self class customerMissing  ]! !!CustomerImporter methodsFor: 'importing' stamp: 'julianpalladino 6/25/2018 00:05'!processLine	line := inputStream nextLine.	^ line notNil.! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianSicardi 6/23/2018 23:27'!createCustomerRecord	self assertCustomerRecordHasCorrectNumerOfFields .	newCustomer := Customer new.	newCustomer firstName: lineRecord  second.	newCustomer lastName: lineRecord third.	newCustomer identificationType: lineRecord fourth.	newCustomer identificationNumber: lineRecord fifth.	session persist: newCustomer.! !!CustomerImporter methodsFor: 'importing' stamp: 'julianpalladino 6/25/2018 00:00'!lineToRecord	lineRecord := line substrings: {$,}.	self assertRecordLineIsNotEmpty.	self assertTypeOfRecordIsOneCharacter ! !!CustomerImporter methodsFor: 'importing' stamp: 'julianpalladino 6/25/2018 00:06'!initializeFrom: anInputStream on: aSession	inputStream := anInputStream.	session := aSession.! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianSicardi 6/23/2018 23:42'!createAddressRecord	| newAddress |	self assertAddressRecordHasCorrectNumerOfFields.	self assertCustomerIsNotNil.	newAddress := Address new.	newAddress streetName: lineRecord second.	newAddress streetNumber: lineRecord third asInteger.	newAddress town: lineRecord fourth.	newAddress zipCode: lineRecord fifth asInteger.	newAddress province: lineRecord sixth.	newCustomer addAddress: newAddress! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error' stamp: 'SebastianSicardi 6/23/2018 23:52'!invalidRecordType	^'Invalid record type!!'! !!CustomerImporter class methodsFor: 'error handling' stamp: 'SebastianSicardi 6/23/2018 23:00'!addressRecordHasTooManyColumns	^'Address has too many columns!!'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'SebastianSicardi 6/23/2018 22:50'!customerRecordHasTooManyColumns	^'Record has too many columns!!'! !!CustomerImporter class methodsFor: 'errors' stamp: 'SebastianSicardi 6/23/2018 23:41'!customerMissing	^'Customer missing'! !!CustomerImporter class methodsFor: 'error handing' stamp: 'SebastianSicardi 6/23/2018 23:38'!addressRecordHasFewerColumns	^'Adress Record has pocas columnas!!'! !!CustomerImporter class methodsFor: 'error reporting' stamp: 'SebastianSicardi 6/23/2018 22:56'!customerRecordHasFewerColumns	^ 'Customer Record has very few columns'! !