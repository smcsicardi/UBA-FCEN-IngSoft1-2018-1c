Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'town' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'town' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'accessing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'julianpalladino 6/27/2018 18:06'!tearDown	customerSystem commit.	customerSystem close! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'julianpalladino 6/27/2018 23:35'!setUp	customerSystem := Enviroment current createCustomerSystem.	customerSystem start.	customerSystem beginTransaction.! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/27/2018 15:50'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/27/2018 15:50'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/27/2018 15:50'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/27/2018 15:50'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 6/27/2018 20:04'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'asserting' stamp: 'julianpalladino 6/27/2018 17:37'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := customerSystem		customerIdentifiedAs: idType		numbered: idNumber.	self		assert: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 2.	self		assert: customer		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: customer		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'julianpalladino 6/27/2018 17:37'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := customerSystem		customerIdentifiedAs: idType		numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'julianpalladino 6/27/2018 15:21'!assertImportedCustomersSizeIsCorrect	self assert: customerSystem allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'julianpalladino 6/27/2018 17:37'!alwaysImportedCustomer	^ customerSystem		customerIdentifiedAs: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber! !!CustomerImportTest methodsFor: 'importing' stamp: 'julianpalladino 6/27/2018 18:31'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream withCustomerSystem: customerSystem) import! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !Object subclass: #CustomerImporter	instanceVariableNames: 'line readStream record newCustomer customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'julianpalladino 6/27/2018 18:28'!importCustomer	self assertValidCustomerRecordSize.		newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	customerSystem addCustomer: newCustomer! !!CustomerImporter methodsFor: 'initialization' stamp: 'julianpalladino 6/27/2018 18:32'!initializeOn: aReadStream withCustomerSystem: aCustomerSystem	readStream := aReadStream.		customerSystem := aCustomerSystem ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'julianpalladino 6/27/2018 18:30'!from: aReadStream withCustomerSystem: aCustomerSystem	^self new initializeOn: aReadStream withCustomerSystem: aCustomerSystem! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'importing' stamp: 'julianpalladino 6/27/2018 18:03'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility ! !!CustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 23:33'!start	self subclassResponsibility ! !!CustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 18:03'!beginTransaction	self subclassResponsibility ! !!CustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 18:04'!customersIsEmpty	self subclassResponsibility ! !!CustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 18:03'!allCustomers	self subclassResponsibility ! !!CustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 18:26'!addCustomer: aCustomerToAdd	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'julianpalladino 6/27/2018 18:06'!close	self subclassResponsibility ! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'julianpalladino 6/27/2018 18:06'!commit	self subclassResponsibility ! !Object subclass: #Enviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Enviroment methodsFor: 'customer system creation' stamp: 'julianpalladino 6/27/2018 20:21'!createCustomerSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Enviroment class	instanceVariableNames: ''!!Enviroment class methodsFor: 'enviroment assignation' stamp: 'julianpalladino 6/27/2018 23:04'!isCurrent	self subclassResponsibility ! !!Enviroment class methodsFor: 'enviroment assignation' stamp: 'julianpalladino 6/27/2018 23:26'!current	| currentSubclasses |	currentSubclasses := self allSubclasses select: [ :anEnviromentSubclass |  anEnviromentSubclass isCurrent ].	(currentSubclasses isEmpty) ifTrue: [ self error: self noCurrentEnviromentError ].	(currentSubclasses size > 1 ) ifTrue: [ self error: self moreThanOneCurrentEnviromentError ].		^(currentSubclasses anyOne new)! !!Enviroment class methodsFor: 'error messages' stamp: 'julianpalladino 6/27/2018 23:15'!noCurrentEnviromentError	^ 'No current enviroment'! !!Enviroment class methodsFor: 'error messages' stamp: 'julianpalladino 6/27/2018 23:15'!moreThanOneCurrentEnviromentError	^ 'There is more than one current enviroment'! !Enviroment subclass: #DevelopmentEnviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelopmentEnviroment methodsFor: 'customer system creation' stamp: 'julianpalladino 6/27/2018 22:54'!createCustomerSystem	^ TransientCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnviroment class	instanceVariableNames: ''!!DevelopmentEnviroment class methodsFor: 'enviroment assignation' stamp: 'julianpalladino 6/27/2018 23:21'!isCurrent	^ IntegrationEnviroment isCurrent not	"segun se dijo en la lista de mails, el isCurrent es hardcodeado por ahora"! !Enviroment subclass: #IntegrationEnviroment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnviroment methodsFor: 'customer system creation' stamp: 'julianpalladino 6/27/2018 22:54'!createCustomerSystem	^PersistentCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnviroment class	instanceVariableNames: ''!!IntegrationEnviroment class methodsFor: 'enviroment assignation' stamp: 'julianpalladino 6/27/2018 23:46'!isCurrent	^ true	"segun se dijo en la lista de mails, el isCurrent es hardcodeado por ahora"! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'julianpalladino 6/27/2018 18:06'!commit	session commit! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'julianpalladino 6/27/2018 18:06'!close	session close! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'julianpalladino 6/27/2018 18:58'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|customers |		customers := session 		select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			(customers isEmpty) ifTrue: [self error: self class customerNotFoundError ].	(customers size > 1) ifTrue: [self error: self class tooManyCustomersFoundError ].		^customers anyOne.! !!PersistentCustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 14:56'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 23:33'!start	session open! !!PersistentCustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 16:01'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 14:55'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 16:01'!initializeSession	session :=			(DataBaseSession				for:					(Array						with: self addressMapping						with: self customerMapping))! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 15:49'!customersIsEmpty	^ self allCustomers isEmpty! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 16:01'!allCustomers	^ session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 18:28'!addCustomer: aCustomerToAdd	session persist: aCustomerToAdd ! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'julianpalladino 6/27/2018 20:05'!initialize	self initializeSession.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PersistentCustomerSystem class	instanceVariableNames: ''!!PersistentCustomerSystem class methodsFor: 'error messages' stamp: 'julianpalladino 6/27/2018 17:36'!customerNotFoundError	^ 'Customer not found'! !!PersistentCustomerSystem class methodsFor: 'error messages' stamp: 'julianpalladino 6/27/2018 17:41'!tooManyCustomersFoundError	^ 'More than one customer identifies like this'! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'importing' stamp: 'julianpalladino 6/27/2018 18:58'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		| identifiedCustomers |		identifiedCustomers :=  customers select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ].			(identifiedCustomers isEmpty) ifTrue: [self error: self class customerNotFoundError ].	(identifiedCustomers size > 1) ifTrue: [self error: self class tooManyCustomersFoundError ].		^identifiedCustomers anyOne.! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 18:05'!customersIsEmpty	^ self allCustomers isEmpty! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 18:05'!allCustomers	^ customers copy! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'julianpalladino 6/27/2018 18:51'!addCustomer: aCustomerToAdd	customers addLast: aCustomerToAdd ! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'julianpalladino 6/27/2018 18:06'!close! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'julianpalladino 6/27/2018 18:43'!commit! !!TransientCustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 23:34'!start! !!TransientCustomerSystem methodsFor: 'setup' stamp: 'julianpalladino 6/27/2018 18:05'!beginTransaction	! !!TransientCustomerSystem methodsFor: 'initialization' stamp: 'julianpalladino 6/27/2018 20:05'!initialize	customers := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TransientCustomerSystem class	instanceVariableNames: ''!!TransientCustomerSystem class methodsFor: 'error messages' stamp: 'julianpalladino 6/27/2018 18:05'!customerNotFoundError	^ 'Customer not found'! !!TransientCustomerSystem class methodsFor: 'error messages' stamp: 'julianpalladino 6/27/2018 18:05'!tooManyCustomersFoundError	^ 'More than one customer identifies like this'! !