Object subclass: #Supplier	instanceVariableNames: 'id name identificationType identificationNumber addresses customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-SupplierModel'!!Supplier methodsFor: 'name' stamp: 'SebastianSicardi 7/1/2018 14:44'!name	^ name! !!Supplier methodsFor: 'name' stamp: 'SebastianSicardi 7/1/2018 14:45'!name: aName	name := aName! !!Supplier methodsFor: 'identification' stamp: 'SebastianSicardi 7/1/2018 12:44'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Supplier methodsFor: 'identification' stamp: 'SebastianSicardi 7/1/2018 12:44'!identificationNumber		^identificationNumber ! !!Supplier methodsFor: 'identification' stamp: 'SebastianSicardi 7/1/2018 12:44'!identificationType		^identificationType ! !!Supplier methodsFor: 'identification' stamp: 'SebastianSicardi 7/1/2018 12:44'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !!Supplier methodsFor: 'identification' stamp: 'SebastianSicardi 7/1/2018 12:44'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Supplier methodsFor: 'initialization' stamp: 'SebastianSicardi 7/1/2018 13:14'!initialize	super initialize.	addresses := OrderedCollection new.	customers  := OrderedCollection new! !!Supplier methodsFor: 'addresses and customers' stamp: 'SebastianSicardi 7/1/2018 12:44'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'addresses and customers' stamp: 'SebastianSicardi 7/1/2018 13:13'!addCustomer: aCustomer	customers add: aCustomer ! !!Supplier methodsFor: 'addresses and customers' stamp: 'SebastianSicardi 7/1/2018 14:46'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!Supplier methodsFor: 'addresses and customers' stamp: 'SebastianSicardi 7/1/2018 12:44'!addressesIsEmpty		^addresses isEmpty! !!Supplier methodsFor: 'addresses and customers' stamp: 'SebastianSicardi 7/1/2018 12:44'!addAddress: anAddress 	addresses add: anAddress ! !!Supplier methodsFor: 'addresses and customers' stamp: 'SebastianSicardi 7/1/2018 14:45'!customersIsEmpty		^customers isEmpty ! !!Supplier methodsFor: 'addresses and customers' stamp: 'SebastianSicardi 7/1/2018 12:44'!numberOfAddresses		^addresses size! !!Supplier methodsFor: 'addresses and customers' stamp: 'SebastianSicardi 7/1/2018 12:44'!addresses	^ addresses! !Object subclass: #SupplierImporter	instanceVariableNames: 'line readStream record newCustomer system newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-SupplierModel'!!SupplierImporter methodsFor: 'importing' stamp: 'SebastianSicardi 7/1/2018 12:33'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'SebastianSicardi 7/1/2018 12:55'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing - private' stamp: 'SebastianSicardi 7/1/2018 12:33'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing - private' stamp: 'SebastianSicardi 7/1/2018 12:33'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'importing - private' stamp: 'SebastianSicardi 7/1/2018 17:01'!importSupplier	self assertValidSupplierRecordSize .	newSupplier := Supplier new.	newSupplier name: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.	system supplierSystem add: newSupplier! !!SupplierImporter methodsFor: 'importing - private' stamp: 'SebastianSicardi 7/1/2018 13:12'!importRecord	self isSupplierRecord		ifTrue: [ ^ self importSupplier ].	self isNewCustomerRecord		ifTrue: [ ^ self importNewCustomer ].	self isExistingCustomerRecord		ifTrue: [ ^ self importExistingCustomer ].	self isAddressRecord		ifTrue: [ ^ self importAddress ].	self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private' stamp: 'SebastianSicardi 7/1/2018 13:05'!isExistingCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'importing - private' stamp: 'SebastianSicardi 7/1/2018 13:04'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private' stamp: 'SebastianSicardi 7/1/2018 12:33'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!SupplierImporter methodsFor: 'initialization' stamp: 'SebastianSicardi 7/1/2018 12:33'!initializeOn: aReadStream using: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem! !!SupplierImporter methodsFor: 'error signal' stamp: 'SebastianSicardi 7/1/2018 16:47'!signalCustomerWithoutSupplierError	self error: self class customerWithoutSupplierErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'SebastianSicardi 7/1/2018 12:33'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'SebastianSicardi 7/1/2018 12:33'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'SebastianSicardi 7/1/2018 17:01'!signalInvalidSupplierRecord	self error: self class invalidSupplierRecordErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'SebastianSicardi 7/1/2018 12:33'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'SebastianSicardi 7/1/2018 16:00'!signalAddressWithoutSupplierError	self error: self class addressWithoutSupplierErrorDescription! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'SebastianSicardi 7/1/2018 17:00'!assertValidSupplierRecordSize	record size ~= 4		ifTrue: [ self signalInvalidSupplierRecord ]! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'SebastianSicardi 7/1/2018 12:33'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'SebastianSicardi 7/1/2018 16:50'!importNewCustomer	self assertValidCustomerRecordSize.	self assertThereIsSupplierForCustomer .	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system customerSystem add: newCustomer.	newSupplier addCustomer: newCustomer! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'SebastianSicardi 7/1/2018 16:46'!importExistingCustomer	| existingCustomer |	self assertValidExistingCustomerRecordSize.	self assertThereIsSupplierForCustomer.	existingCustomer := system customerSystem customerIdentifiedAs: record second numbered: record third.	newSupplier addCustomer: existingCustomer! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'SebastianSicardi 7/1/2018 16:48'!assertThereIsSupplierForCustomer	newSupplier isNil		ifTrue: [ self signalCustomerWithoutSupplierError ]! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'SebastianSicardi 7/1/2018 12:33'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'SebastianSicardi 7/1/2018 12:33'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'SebastianSicardi 7/1/2018 16:01'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutSupplierError ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'SebastianSicardi 7/1/2018 15:59'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.	newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newSupplier  addAddress: newAddress! !!SupplierImporter methodsFor: 'asserting' stamp: 'SebastianSicardi 7/1/2018 16:41'!assertValidExistingCustomerRecordSize	record size ~= 3		ifTrue: [ self signalInvalidCustomerRecord ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'error descriptions' stamp: 'SebastianSicardi 7/1/2018 16:00'!addressWithoutSupplierErrorDescription	^ 'There is no Supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'SebastianSicardi 7/1/2018 16:47'!customerWithoutSupplierErrorDescription	^ 'There is no Supplier for the imported customer'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'SebastianSicardi 7/1/2018 12:33'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'SebastianSicardi 7/1/2018 17:01'!invalidSupplierRecordErrorDescription	^ 'Invalid supplier record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'SebastianSicardi 7/1/2018 12:33'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'SebastianSicardi 7/1/2018 12:33'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'SebastianSicardi 7/1/2018 12:33'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !Object subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-SupplierModel'!!SupplierSystem methodsFor: 'suppliers' stamp: 'SebastianSicardi 7/1/2018 12:41'!add: aCustomer	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'julianpalladino 7/2/2018 03:57'!suppliersSize	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'julianpalladino 7/2/2018 03:57'!allSuppliers	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'julianpalladino 7/2/2018 03:58'!suppliersIsEmpty	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'julianpalladino 7/2/2018 03:57'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'erpSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-SupplierModel'!!PersistentSupplierSystem methodsFor: 'customers' stamp: 'julianpalladino 7/2/2018 03:41'!add: aCustomer	erpSystem session persist: aCustomer! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'julianpalladino 7/2/2018 03:55'!suppliersSize	^ self allSuppliers size! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'julianpalladino 7/2/2018 03:41'!suppliersIsEmpty	^ self allSuppliers isEmpty! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'julianpalladino 7/2/2018 03:56'!allSuppliers	^ erpSystem session selectAllOfType: Supplier! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'julianpalladino 7/2/2018 03:41'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| suppliers |	suppliers := erpSystem session		select: [ :aSupplier | 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber ] ]		ofType: Supplier.	suppliers size = 1		ifFalse: [ self error: 'No o more that one supplier found' ].	^ suppliers anyOne! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'julianpalladino 7/2/2018 03:39'!initializeWithERPSystem: anERPSystem	super initialize.	erpSystem := anERPSystem.! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-SupplierModel'!!TransientSupplierSystem methodsFor: 'customers' stamp: 'SebastianSicardi 7/1/2018 15:37'!add: aSupplier	suppliers  add: aSupplier! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'SebastianSicardi 7/1/2018 14:49'!suppliersSize	^suppliers size.! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'SebastianSicardi 7/1/2018 15:57'!suppliersIsEmpty	^ suppliers isEmpty ! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'SebastianSicardi 7/1/2018 15:38'!allSuppliers	^ suppliers  copy! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'SebastianSicardi 7/1/2018 14:49'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ suppliers detect: [ :aSupplier | aSupplier isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientSupplierSystem methodsFor: 'initialization' stamp: 'SebastianSicardi 7/1/2018 15:42'!initialize	suppliers  := OrderedCollection new! !