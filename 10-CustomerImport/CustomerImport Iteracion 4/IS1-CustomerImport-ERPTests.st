TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer customerSystem anERPSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-ERPTests'!!CustomerImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 15:16'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 15:15'!addressWithoutSupplierTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 15:16'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 15:16'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'julianpalladino 7/2/2018 03:35'!setUp	anERPSystem := Environment current createERPSystem .	customerSystem := anERPSystem customerSystem.	anERPSystem start.	anERPSystem beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'julianpalladino 7/2/2018 03:35'!tearDown	anERPSystem commit.	anERPSystem shutdown! !!CustomerImportTest methodsFor: 'test data' stamp: 'SebastianSicardi 7/1/2018 15:16'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'SebastianSicardi 7/1/2018 15:16'!validTestData	^ ReadStream on: self alwaysImportedNewCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'importing' stamp: 'julianpalladino 7/2/2018 03:04'!importSuppliersFrom: inputStream	(CustomerImporter from: inputStream using: customerSystem) import! !!CustomerImportTest methodsFor: 'asserting' stamp: 'julianpalladino 7/2/2018 03:04'!assertImportedSuppliersSizeIsCorrect	self assert: customerSystem allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'julianpalladino 7/2/2018 03:04'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := customerSystem customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:04'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importSuppliersFrom: self newCustomerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 12:37'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importSuppliersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:04'!testCanNotImportAddressWithoutCustomer	self		should: [ self importSuppliersFrom: self addressWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 12:37'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importSuppliersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 12:37'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importSuppliersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 15:18'!testImportCustomers	self importSuppliersFrom: self validTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:04'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importSuppliersFrom: self newCustomerRecordStartingWithMoreThanOneNCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 12:37'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importSuppliersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:04'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importSuppliersFrom: self newCustomerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: customerSystem customersIsEmpty ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 15:29'!newCustomerRecordStartingWithMoreThanOneNCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 15:16'!alwaysImportedNewCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 15:24'!newCustomerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 15:24'!newCustomerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'julianpalladino 7/2/2018 03:04'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ customerSystem		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-ERPTests'!!Environment methodsFor: 'system creation' stamp: 'julianpalladino 7/2/2018 03:22'!createERPSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelpmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-ERPTests'!!DevelpmentEnvironment methodsFor: 'system creation' stamp: 'SebastianSicardi 7/1/2018 15:07'!createERPSystem	^ TransientERPSystem  new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelpmentEnvironment class	instanceVariableNames: ''!!DevelpmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-ERPTests'!!IntegrationEnvironment methodsFor: 'system creation' stamp: 'julianpalladino 7/2/2018 03:22'!createERPSystem	^ PersistentERPSystem  new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 04:24'!isCurrent		^true! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer anERPSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-ERPTests'!!SupplierImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 16:06'!testCanNotImportAddressRecordWithMoreThanSixFields	self		should: [ self importSuppliersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 15:10'!testCanNotImportAddressRecordWithLessThanSixFields	self		should: [ self importSuppliersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:11'!testCanNotImportAddressWithoutSupplier	self		should: [ self importSuppliersFrom: self addressWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter addressWithoutSupplierErrorDescription.			self assert: anERPSystem supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:11'!testShouldNotImportNewCustomerRecordsStartingWithMoreThanNC	self		should: [ self importSuppliersFrom: self newCustomerRecordStartingWithMoreThanOneNCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: anERPSystem customerSystem customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 16:11'!testEmptyLinesAreRecognizedAsInvalidRecords	self		should: [ self importSuppliersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 16:42'!testCanNotImportExistingCustomerRecordWithMoreThanThreeFields	self		should: [ self				importSuppliersFrom: self existingCustomerRecordWithMoreThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 16:39'!testCanNotImportExistingCustomerRecordWithLessThanThreeFields	self		should: [ self				importSuppliersFrom: self existingCustomerRecordWithLessThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:11'!testShouldNotImportExistingCustomerRecordsStartingWithMoreThanEC	self		should: [ self importSuppliersFrom: self existingCustomerRecordStartingWithMoreThanOneECTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: anERPSystem customerSystem customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:11'!testCanNotImportNewCustomerRecordWithMoreThanFiveFields	self		should: [ self importSuppliersFrom: self newCustomerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: anERPSystem customerSystem customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 03:11'!testCanNotImportNewCustomerRecordWithLessThanFiveFields	self		should: [ self importSuppliersFrom: self newCustomerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: anERPSystem customerSystem customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'julianpalladino 7/2/2018 04:16'!testImportSuppliers	| aCustomer |	aCustomer := Customer new.	aCustomer firstName: 'unCustomerQueYaExistia'.	aCustomer lastName: 'apellido'.	aCustomer identificationType: 'D'.	aCustomer identificationNumber: '5456774'.	anERPSystem customerSystem add: aCustomer.	self importSuppliersFrom: self validTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplier1WasImportedCorrectly: aCustomer! !!SupplierImportTest methodsFor: 'testing' stamp: 'SebastianSicardi 7/1/2018 16:15'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self		should: [ self importSuppliersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'julianpalladino 7/2/2018 03:11'!setUp	anERPSystem := Environment current createERPSystem.	anERPSystem start.	anERPSystem beginTransaction! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'julianpalladino 7/2/2018 03:11'!tearDown	anERPSystem commit.	anERPSystem shutdown! !!SupplierImportTest methodsFor: 'test data' stamp: 'SebastianSicardi 7/1/2018 16:22'!dataWithEmptyLine	^ ReadStream		on:			self alwaysImportedSupplierRecord 				,					'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data' stamp: 'SebastianSicardi 7/1/2018 15:31'!validTestData	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data' stamp: 'julianpalladino 7/2/2018 03:11'!assertSupplier1WasImportedCorrectly: anExistingCustomer		| supplier |		supplier := anERPSystem supplierSystem supplierIdentifiedAs: 'D' numbered: '123'.	self assert: supplier name equals: 'Supplier1'.		self assertPepeSanchezWasImportedCorrectlyForSupplier: supplier.	self assert: supplier hasCustomerIdentifiedAs: 'D' numbered: '5456774' andIsCustomer: anExistingCustomer.		self assert: supplier hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: supplier hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 17:06'!existingCustomerRecordStartingWithMoreThanOneECTestData	^ ReadStream		on:			self alwaysImportedSupplierRecord				,					'EEC,D,12123,123'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 16:43'!existingCustomerRecordWithLessThanThreeFieldsTestData	^ ReadStream		on:			self alwaysImportedSupplierRecord				,					'EC,D'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 15:14'!addressRecordWithMoreThanSixFieldsTestData	^ ReadStream		on:			self alwaysImportedSupplierRecord				,					'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 15:00'!alwaysImportedSupplierRecord	^ 'S,Supplier1,' , self alwaysImportedSupplierIdType , ',' , self alwaysImportedSupplierIdNumber! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 14:59'!alwaysImportedSupplierIdType^'D'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 16:36'!addressRecordStartingWithMoreThanOneATestData	^ ReadStream on: self alwaysImportedSupplierRecord , '	AA,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 16:45'!existingCustomerWithoutSupplierTestData^ ReadStream on: 'EC,D,123'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'julianpalladino 7/2/2018 03:11'!testCanNotImportExistingCustomerWithoutSupplier	self		should: [ self importSuppliersFrom: self existingCustomerWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter customerWithoutSupplierErrorDescription.			self assert: anERPSystem supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 15:00'!alwaysImportedSupplierIdNumber	^'123'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'julianpalladino 7/2/2018 03:11'!testCanNotImportNewCustomerWithoutSupplier	self		should: [ self importSuppliersFrom: self newCustomerWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter customerWithoutSupplierErrorDescription.			self assert: anERPSystem supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 16:37'!addressRecordWithLessThanSixFieldsTestData	^ ReadStream		on:			self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 15:15'!addressWithoutSupplierTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'SebastianSicardi 7/1/2018 17:05'!existingCustomerRecordWithMoreThanThreeFieldsTestData	^ ReadStream		on:			self alwaysImportedSupplierRecord				,					'EC,D,12123,123'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 15:29'!newCustomerRecordStartingWithMoreThanOneNCTestData	^ ReadStream on: 'NCC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 12:33'!alwaysImportedCustomerIdType	^ 'D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 12:33'!alwaysImportedCustomerIdNumber	^ '22333444'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 15:16'!alwaysImportedNewCustomerRecord	^ 'NC,Pepe,Sanchez,' , self alwaysImportedCustomerIdType , ',' , self alwaysImportedCustomerIdNumber! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 15:24'!newCustomerRecordWithLessThanFiveFieldsTestData	^ ReadStream on: 'NC,Pepe,Sanchez,D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'julianpalladino 7/2/2018 03:11'!alwaysImportedSupplier	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedSupplierIdType.	anIdentificationNumber := self alwaysImportedSupplierIdNumber.	^ anERPSystem supplierSystem supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 15:24'!newCustomerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedNewCustomerRecord,',x'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'SebastianSicardi 7/1/2018 16:50'!newCustomerWithoutSupplierTestData	^ ReadStream on: 'NC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'tests' stamp: 'SebastianSicardi 7/1/2018 17:03'!supplierRecordWithMoreThanFourFieldsTestData	^ ReadStream on: self alwaysImportedSupplierRecord , ',extracolumn'! !!SupplierImportTest methodsFor: 'tests' stamp: 'SebastianSicardi 7/1/2018 16:59'!supplierRecordWithLessThanFourFieldsTestData	^ ReadStream on: 'S,Supplier1,' , self alwaysImportedSupplierIdType! !!SupplierImportTest methodsFor: 'tests' stamp: 'julianpalladino 7/2/2018 03:11'!testCanNotImportSupplierRecordWithLessThanFourFields	self		should: [ self importSuppliersFrom: self supplierRecordWithLessThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: anERPSystem supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'julianpalladino 7/2/2018 03:11'!testCanNotImportSupplierRecordWithMoreThanFourFields	self		should: [ self importSuppliersFrom: self supplierRecordWithMoreThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: anERPSystem supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'asserting' stamp: 'julianpalladino 7/2/2018 03:11'!assertImportedSuppliersSizeIsCorrect	self assert: anERPSystem supplierSystem suppliersSize equals: 1! !!SupplierImportTest methodsFor: 'asserting' stamp: 'SebastianSicardi 7/1/2018 12:33'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!SupplierImportTest methodsFor: 'asserting' stamp: 'julianpalladino 7/2/2018 03:11'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := anERPSystem customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'SebastianSicardi 7/1/2018 15:17'!assert: aSupplier hasCustomerIdentifiedAs: idType numbered: idNumber andIsCustomer: aCustomer	self assert: (aSupplier customerIdentifiedAs: idType numbered: idNumber) equals: aCustomer ! !!SupplierImportTest methodsFor: 'asserting' stamp: 'SebastianSicardi 7/1/2018 15:23'!assertPepeSanchezWasImportedCorrectlyForSupplier: aSupplier 		| customer |	customer := aSupplier customerIdentifiedAs: self alwaysImportedCustomerIdType numbered: self alwaysImportedCustomerIdNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'asserting' stamp: 'SebastianSicardi 7/1/2018 12:33'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!SupplierImportTest methodsFor: 'asserting' stamp: 'SebastianSicardi 7/1/2018 12:33'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'importing' stamp: 'julianpalladino 7/2/2018 03:11'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream using: anERPSystem) import! !